#include <windows.h>
#include <iostream>
using namespace std;

int main(int argc, char** argv){
    // Define MessageBox Shellcode (x86)
    unsigned char shellcode[] = "" ;

    // Allocate memory using VirtualAlloc
    // https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc
    LPVOID allocated_mem = VirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    if (allocated_mem == NULL){
        char errorMsg[256];
        FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM, NULL, GetLastError(), 0, errorMsg, sizeof(errorMsg), NULL);
        cout << "Failed to allocated memory: " << errorMsg << endl;
        return 1;
    }
    
    cout << "Memory Allocated at address: " << allocated_mem << endl;

    // Write shellcode to the allocated memory
    memcpy(allocated_mem, shellcode, sizeof(shellcode));

    cout << "Shell code is written to allocated memory!\n" << endl;

    // Create thread to execute the MessageBox Shellcode
    HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)allocated_mem, NULL, 0, NULL);

    if (hThread == NULL) {
        char errorMsg[256];
        FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM, NULL, GetLastError(), 0, errorMsg, sizeof(errorMsg) / sizeof(wchar_t), NULL);
        cout << "Failed to create thread: " << errorMsg << endl;
        return 1;
    }
    
    // Halt execution until created thread returns
    WaitForSingleObject(hThread, INFINITE);
    // Close handle to thread
    CloseHandle(hThread);
    // Free allocated memory
    VirtualFree(allocated_mem, 0, MEM_RELEASE);
    return 0;
}